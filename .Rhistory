height_top = apply_cut(DAM_HGT_M) -1,
dis_top = apply_cut(DIS_AVG_LS) - 1
) %>%
mutate(score = cap_top * area_top * height_top * dis_top) %>%
st_drop_geometry() %>%
filter(score == 0)
View(dams)
dams <- read_sf("./dams/GRanD_Version_1_3/GRanD_dams_v1_3.shp") %>% select(GRAND_ID, DAM_NAME,COUNTRY, YEAR, ALT_YEAR,CAP_MCM, AREA_SKM, DAM_HGT_M, DIS_AVG_LS) %>%
mutate(YEAR = ifelse(YEAR < ALT_YEAR, ALT_YEAR, YEAR)) %>%
filter(YEAR >= 1986) %>% drop_na() %>%
mutate(
cap_top = apply_cut(CAP_MCM) - 1,
area_top = apply_cut(AREA_SKM) - 1,
height_top = apply_cut(DAM_HGT_M) -1,
dis_top = apply_cut(DIS_AVG_LS) - 1
) %>%
mutate(score = cap_top * area_top * height_top * dis_top) %>%
st_drop_geometry() %>%
filter(score == 0)
View(dams)
dams <- read_sf("./dams/GRanD_Version_1_3/GRanD_dams_v1_3.shp") %>% select(GRAND_ID, DAM_NAME,COUNTRY, YEAR, ALT_YEAR,CAP_MCM, AREA_SKM, DAM_HGT_M, DIS_AVG_LS) %>%
mutate(YEAR = ifelse(YEAR < ALT_YEAR, ALT_YEAR, YEAR)) %>%
filter(YEAR >= 1970) %>% drop_na() %>%
mutate(
cap_top = apply_cut(CAP_MCM) - 1,
area_top = apply_cut(AREA_SKM) - 1,
height_top = apply_cut(DAM_HGT_M) -1,
dis_top = apply_cut(DIS_AVG_LS) - 1
) %>%
mutate(score = cap_top * area_top * height_top * dis_top) %>%
st_drop_geometry() %>%
filter(score == 0)
View(dams)
apply_cut <-function(x) {
x[x<0] <- NA
cut(x, breaks =c(quantile(x,probs=seq(0,1, by=0.2), na.rm = TRUE)),include.lowest=TRUE, labels = F)
}
dams <- read_sf("./dams/GRanD_Version_1_3/GRanD_dams_v1_3.shp") %>% select(GRAND_ID, DAM_NAME,COUNTRY, YEAR, ALT_YEAR,CAP_MCM, AREA_SKM, DAM_HGT_M, DIS_AVG_LS) %>%
mutate(YEAR = ifelse(YEAR < ALT_YEAR, ALT_YEAR, YEAR)) %>%
filter(YEAR >= 1970) %>% drop_na() %>%
mutate(
cap_top = apply_cut(CAP_MCM) - 1,
area_top = apply_cut(AREA_SKM) - 1,
height_top = apply_cut(DAM_HGT_M) -1,
dis_top = apply_cut(DIS_AVG_LS) - 1
) %>%
mutate(score = cap_top * area_top * height_top * dis_top) %>%
st_drop_geometry()
View(dams)
dams <- read_sf("./dams/GRanD_Version_1_3/GRanD_dams_v1_3.shp") %>% select(GRAND_ID, DAM_NAME,COUNTRY, YEAR, ALT_YEAR,CAP_MCM, AREA_SKM, DAM_HGT_M, DIS_AVG_LS) %>%
mutate(YEAR = ifelse(YEAR < ALT_YEAR, ALT_YEAR, YEAR)) %>%
filter(YEAR >= 1970) %>% drop_na() %>%
mutate(
cap_top = apply_cut(CAP_MCM) - 5,
area_top = apply_cut(AREA_SKM) - 5,
height_top = apply_cut(DAM_HGT_M) -5,
dis_top = apply_cut(DIS_AVG_LS) - 5
) %>%
mutate(score = cap_top * area_top * height_top * dis_top) %>%
st_drop_geometry()
apply_cut <-function(x) {
x[x<0] <- NA
cut(x, breaks =c(quantile(x,probs=seq(0,1, by=0.2), na.rm = TRUE)),include.lowest=TRUE, labels = F)
}
View(dams)
dams <- read_sf("./dams/GRanD_Version_1_3/GRanD_dams_v1_3.shp") %>% select(GRAND_ID, DAM_NAME,COUNTRY, YEAR, ALT_YEAR,CAP_MCM, AREA_SKM, DAM_HGT_M, DIS_AVG_LS) %>%
mutate(YEAR = ifelse(YEAR < ALT_YEAR, ALT_YEAR, YEAR)) %>%
filter(YEAR >= 1990) %>% drop_na() %>%
mutate(
cap_top = apply_cut(CAP_MCM) - 5,
area_top = apply_cut(AREA_SKM) - 5,
height_top = apply_cut(DAM_HGT_M) -5,
dis_top = apply_cut(DIS_AVG_LS) - 5
) %>%
mutate(score = cap_top * area_top * height_top * dis_top) %>%
st_drop_geometry()
View(dams)
dams <- read_sf("./dams/GRanD_Version_1_3/GRanD_dams_v1_3.shp") %>% select(GRAND_ID, DAM_NAME,COUNTRY, YEAR, ALT_YEAR,CAP_MCM, AREA_SKM, DAM_HGT_M, DIS_AVG_LS) %>%
mutate(YEAR = ifelse(YEAR < ALT_YEAR, ALT_YEAR, YEAR)) %>%
filter(YEAR >= 1990) %>% drop_na() %>%
mutate(
cap_top = apply_cut(CAP_MCM) - 5,
area_top = apply_cut(AREA_SKM) - 5,
height_top = apply_cut(DAM_HGT_M) -5,
dis_top = apply_cut(DIS_AVG_LS) - 5
) %>%
mutate(score = cap_top * area_top * height_top * dis_top) %>%
st_drop_geometry() %>%
filter(score == 0)
View(dams)
apply_cut <-function(x) {
x[x<0] <- NA
cut(x, breaks =c(quantile(x,probs=seq(0,1, by=0.1), na.rm = TRUE)),include.lowest=TRUE, labels = F)
}
dams <- read_sf("./dams/GRanD_Version_1_3/GRanD_dams_v1_3.shp") %>% select(GRAND_ID, DAM_NAME,COUNTRY, YEAR, ALT_YEAR,CAP_MCM, AREA_SKM, DAM_HGT_M, DIS_AVG_LS) %>%
mutate(YEAR = ifelse(YEAR < ALT_YEAR, ALT_YEAR, YEAR)) %>%
filter(YEAR >= 1990) %>% drop_na() %>%
mutate(
cap_top = apply_cut(CAP_MCM) - 5,
area_top = apply_cut(AREA_SKM) - 5,
height_top = apply_cut(DAM_HGT_M) -5,
dis_top = apply_cut(DIS_AVG_LS) - 5
) %>%
mutate(score = cap_top * area_top * height_top * dis_top) %>%
st_drop_geometry() %>%
filter(score == 0)
View(dams)
apply_cut <-function(x) {
x[x<0] <- NA
cut(x, breaks =c(quantile(x,probs=seq(0,1, by=0.2), na.rm = TRUE)),include.lowest=TRUE, labels = F)
}
dams <- read_sf("./dams/GRanD_Version_1_3/GRanD_dams_v1_3.shp") %>% select(GRAND_ID, DAM_NAME,COUNTRY, YEAR, ALT_YEAR,CAP_MCM, AREA_SKM, DAM_HGT_M, DIS_AVG_LS) %>%
mutate(YEAR = ifelse(YEAR < ALT_YEAR, ALT_YEAR, YEAR)) %>%
filter(YEAR >= 1990) %>% drop_na() %>%
mutate(
cap_top = apply_cut(CAP_MCM) - 5,
area_top = apply_cut(AREA_SKM) - 5,
height_top = apply_cut(DAM_HGT_M) -5,
dis_top = apply_cut(DIS_AVG_LS) - 5
) %>%
mutate(score = cap_top * area_top * height_top * dis_top) %>%
st_drop_geometry() %>%
filter(score == 0)
dams[dams < 0] <- NA
View(dams)
dams <- read_sf("./dams/GRanD_Version_1_3/GRanD_dams_v1_3.shp") %>% select(GRAND_ID, DAM_NAME,COUNTRY, YEAR, ALT_YEAR,CAP_MCM, AREA_SKM, DAM_HGT_M, DIS_AVG_LS) %>%
mutate(YEAR = ifelse(YEAR < ALT_YEAR, ALT_YEAR, YEAR)) %>%
filter(YEAR >= 1990) %>% drop_na() %>%
mutate(
cap_top = apply_cut(CAP_MCM) - 5,
area_top = apply_cut(AREA_SKM) - 5,
height_top = apply_cut(DAM_HGT_M) -5,
dis_top = apply_cut(DIS_AVG_LS) - 5
) %>%
mutate(score = cap_top * area_top * height_top * dis_top) %>%
st_drop_geometry() %>%
filter(score == 0)
View(dams)
dams <- read_sf("./dams/GRanD_Version_1_3/GRanD_dams_v1_3.shp") %>% select(GRAND_ID, DAM_NAME,COUNTRY, YEAR, ALT_YEAR,CAP_MCM, AREA_SKM, DAM_HGT_M, DIS_AVG_LS) %>%
mutate(YEAR = ifelse(YEAR < ALT_YEAR, ALT_YEAR, YEAR)) %>%
filter(YEAR >= 1990) %>% drop_na() %>%
mutate(
cap_top = apply_cut(CAP_MCM) - 5,
area_top = apply_cut(AREA_SKM) - 5,
height_top = apply_cut(DAM_HGT_M) -5,
dis_top = apply_cut(DIS_AVG_LS) - 5
) %>%
mutate(score = cap_top * area_top * height_top * dis_top) %>%
filter(score == 0)
View(dams)
dams <- read_sf("./dams/GRanD_Version_1_3/GRanD_dams_v1_3.shp") %>%
select(GRAND_ID, DAM_NAME,COUNTRY, YEAR, ALT_YEAR,CAP_MCM, AREA_SKM, DAM_HGT_M, DIS_AVG_LS) %>%
mutate(YEAR = ifelse(YEAR < ALT_YEAR, ALT_YEAR, YEAR)) %>%
filter(YEAR >= 1990) %>% drop_na() %>%
mutate(
cap_top = apply_cut(CAP_MCM) - 5,
area_top = apply_cut(AREA_SKM) - 5,
height_top = apply_cut(DAM_HGT_M) -5,
dis_top = apply_cut(DIS_AVG_LS) - 5
) %>%
mutate(score = cap_top * area_top * height_top * dis_top) %>%
filter(score == 0)
View(dams)
View(dams)
getwd()
vf <- readRDS("home/Downloads/555723848_1.rds")
getwd()
vf <- readRDS("home/chris/Downloads/555723848_1.rds")
vf <- readRDS("/home/chris/Downloads/555723848_1.rds")
load_all()
install_github("chrislittleboy/deforecasteR")
library(devtools)
install_github("chrislittleboy/deforecasteR")
install_github("chrislittleboy/deforecasteR", force = T)
library(deforecasteR)
load_all()
ppl <- vf[[1]]
params <- c(0.122, 68, 10, 1574, 1033, 8, 0.638, 0.193, 13, 104)
instance <- "/home/cl59/Documents/irace/train/c1/555646257_1.rds"
args = commandArgs(trailingOnly=TRUE);
actual <- read.csv("actual.csv")[,2:3]
instance <- "/home/chris/Downloads/555723848_1.rds"
start <- readRDS(file = instance);
simulated <- deforecast(xdim = NULL,
ydim = NULL,
explicit = TRUE,
p_n = NULL,
np_n = NULL,
ppl_n = NULL,
ppl_loc = start[[3]],
p_loc = start[[1]],
np_loc = start[[2]],
ppl_scaling = params[[1]],
mean_age = params[[2]],
sd_age = params[[3]],
travel_cost = params[[4]],
value = as.numeric(params[[5]]),
mobility = as.numeric(params[[6]]),
k = params[[7]],
r = params[[8]],
maturity = params[[9]],
max_age = params[[10]],
years = 10,
management_cost = 500)
ppl_loc <- start[[3]]
View(ppl_loc)
ppl <- ppl_loc
ppl_scaling = .5
if(ppl_scaling != 1){
scaled_off <- sample(c(0,1),
length(ppl[,1]),
replace = T,
prob = c(1-ppl_scaling, ppl_scaling))
scaled_off[1] <- ifelse(sum(scaled_off) == 0, 1, scaled_off[1])
ppl <- cbind(ppl,scaled_off)
ppl[,3] <- ppl[,3] * ppl[,4]
ppl <- ppl[ppl[,3] != 0,1:3]
}
scaled_off <- sample(c(0,1),
length(ppl[,1]),
replace = T,
prob = c(1-ppl_scaling, ppl_scaling))
scaled_off[1] <- ifelse(sum(scaled_off) == 0, 1, scaled_off[1])
ppl <- cbind(ppl,scaled_off)
View(ppl)
scaled_off <- sample(c(0,1),
length(ppl[,1]),
replace = T,
prob = c(1-ppl_scaling, ppl_scaling))
scaled_off <- sample(c(0,1),
length(ppl[,1]),
replace = T,
prob = c(1-ppl_scaling, ppl_scaling)) # samples
scaled_off[1] <- ifelse(sum(scaled_off) == 0, 1, scaled_off[1]) # makes sure that there is at least one person
ppl <- ppl_loc
ppl <- cbind(ppl,scaled_off)
View(ppl)
ppl <- ppl[ppl[,3] != 0,1:2]
View(ppl)
get_people <- function(ppl_loc, ppl_scaling){
ppl <- ppl_loc
if(ppl_scaling != 1){
scaled_off <- sample(c(0,1),
length(ppl[,1]),
replace = T,
prob = c(1-ppl_scaling, ppl_scaling)) # samples
scaled_off[1] <- ifelse(sum(scaled_off) == 0, 1, scaled_off[1]) # makes sure that there is at least one person
ppl <- cbind(ppl,scaled_off)
ppl <- ppl[ppl[,3] != 0,1:2]
}
return(ppl)
}
ppl_loc <- start[[3]]
get_people(ppl_loc, people_scaling)
get_people(ppl_loc, ppl_scaling)
get_people(ppl_loc, ppl_scaling)
test <- get_people(ppl_loc, ppl_scaling)
View(vf)
View(test)
get_people <- function(ppl_loc, ppl_scaling){
if(ppl_scaling != 1){
scaled_off <- sample(c(0,1),
length(ppl_loc[,1]),
replace = T,
prob = c(1-ppl_scaling, ppl_scaling)) # removes people from landscape based on probability parameter
scaled_off[1] <- ifelse(sum(scaled_off) == 0, 1, scaled_off[1]) # makes sure that there is at least one person
ppl <- cbind(ppl_loc,scaled_off) # binds location of people with whether they're being removed
ppl <- ppl[ppl[,3] != 0,1:2] # removes people scaled off
}
return(ppl)
}
ppl_loc <- start[[3]]
test <- get_people(ppl_loc, ppl_scaling)
test <- get_people(ppl_loc, ppl_scaling)
test <- get_people(ppl_loc, ppl_scaling)
test <- get_people(ppl_loc, ppl_scaling)
test <- get_people(ppl_loc, ppl_scaling)
test <- get_people(ppl_loc, ppl_scaling)
View(test)
p_loc <- start[[1]]
np_loc <- start[[2]]
p_loc <- start[[1]]
np_loc <- start[[2]]
get_trees <- function(p_loc, # 2 column matrix (x/y)
np_loc, # 2 column matrix (x/y)
mean_age, # integer
sd_age) # integer
{
# gets age of trees (normally distributed)
age_p <- rnorm(n = length(p_loc[,1]), mean = mean_age, sd = sd_age)
age_p[age_p < 0] <- 0 # negative ages to 0
age_p <- round(age_p, digits = 0) # rounds to nearest year
p_loc <- matrix(cbind(p_loc, age_p, rep(1, length(age_p))), ncol = 4)
age_np <- rnorm(n = length(np_loc[,1]), mean = mean_age, sd = sd_age)
age_np[age_np < 0] <- 0
age_np <- round(age_np, digits = 0)
np_loc <- matrix(cbind(np_loc, age_np, rep(0, length(age_np))), ncol = 4)
trees <- rbind(p_loc,np_loc);
trees <- matrix(unlist(matrix(trees)), ncol = 4)
return(trees);
}
test <- get_trees(p_loc, np_loc, 50,25)
View(test)
17830*4
make_trees <- function(
xdim,
ydim,
p_n,
np_n,
mean_age,
sd_age){
p_xloc <- sample(c(1:xdim), size = p_n, replace = TRUE);
p_yloc <- sample(c(1:ydim), size = p_n, replace = TRUE);
age_p <- rnorm(n = length(p_xloc), mean = mean_age, sd = sd_age)
age_p[age_p < 0] <- 0
age_p <- round(age_p, digits = 0)
p_trees <- cbind(p_xloc, p_yloc, age_p, 1)
np_xloc <- sample(c(1:xdim), size = np_n, replace = TRUE);
np_yloc <- sample(c(1:ydim), size = np_n, replace = TRUE);
age_np <- rnorm(n = length(np_xloc), mean = mean_age, sd = sd_age)
age_np[age_np < 0] <- 0
age_np <- round(age_np, digits = 0)
np_trees <- cbind(np_xloc, np_yloc, age_np, 0)
trees <- rbind(p_trees, np_trees);
return(trees);
}
simulated <- deforecast(xdim = NULL,
ydim = NULL,
explicit = TRUE,
p_n = NULL,
np_n = NULL,
ppl_n = NULL,
ppl_loc = start[[3]],
p_loc = start[[1]],
np_loc = start[[2]],
ppl_scaling = params[[1]],
mean_age = params[[2]],
sd_age = params[[3]],
travel_cost = params[[4]],
value = as.numeric(params[[5]]),
mobility = as.numeric(params[[6]]),
k = params[[7]],
r = params[[8]],
maturity = params[[9]],
max_age = params[[10]],
years = 10,
management_cost = 500)
get_people <- function(ppl_loc, ppl_scaling){
if(ppl_scaling != 1){
scaled_off <- sample(c(0,1),
length(ppl_loc[,1]),
replace = T,
prob = c(1-ppl_scaling, ppl_scaling)) # removes people from landscape based on probability parameter
scaled_off[1] <- ifelse(sum(scaled_off) == 0, 1, scaled_off[1]) # makes sure that there is at least one person
ppl <- cbind(ppl_loc,scaled_off) # binds location of people with whether they're being removed
ppl <- ppl[ppl[,3] != 0,1:2] # removes people scaled off
}
return(ppl)
}
simulated <- deforecast(xdim = NULL,
ydim = NULL,
explicit = TRUE,
p_n = NULL,
np_n = NULL,
ppl_n = NULL,
ppl_loc = start[[3]],
p_loc = start[[1]],
np_loc = start[[2]],
ppl_scaling = params[[1]],
mean_age = params[[2]],
sd_age = params[[3]],
travel_cost = params[[4]],
value = as.numeric(params[[5]]),
mobility = as.numeric(params[[6]]),
k = params[[7]],
r = params[[8]],
maturity = params[[9]],
max_age = params[[10]],
years = 10,
management_cost = 500)
load_all()
simulated <- deforecast(xdim = NULL,
ydim = NULL,
explicit = TRUE,
p_n = NULL,
np_n = NULL,
ppl_n = NULL,
ppl_loc = start[[3]],
p_loc = start[[1]],
np_loc = start[[2]],
ppl_scaling = params[[1]],
mean_age = params[[2]],
sd_age = params[[3]],
travel_cost = params[[4]],
value = as.numeric(params[[5]]),
mobility = as.numeric(params[[6]]),
k = params[[7]],
r = params[[8]],
maturity = params[[9]],
max_age = params[[10]],
years = 10,
management_cost = 500)
View(simulated)
years = 10;
management_cost = 500
p_s <- sum(simulated[[2]][[1]][,4]) # trees/year1/protected column == 1
np_s <- length(simulated[[2]][[1]][,4]) - sum(simulated[[2]][[1]][,4])
# protected at start
if (length(simulated[[2]]) != (years + 1)) {
p_e <- 0;
np_e <- 0;
} else {
p_e <- sum(simulated[[2]][[years +1]][,4])
np_e <- length(simulated[[2]][[years +1]][,4]) - sum(simulated[[2]][[years +1]][,4])
}
# total deforestation
t <- ((p_e + np_e) - (p_s + np_s))/ (p_s + np_s)
difference <- abs(diff(c(t,actual)))
irace_deforecast <- function(instance,params) {
actual <- read.csv("actual.csv")[,2:3]
actual <- actual$fg[actual$id ==  basename(instance)];
start <- readRDS(file = instance);
simulated <- deforecast(xdim = NULL,
ydim = NULL,
explicit = TRUE,
p_n = NULL,
np_n = NULL,
ppl_n = NULL,
ppl_loc = start[[3]],
p_loc = start[[1]],
np_loc = start[[2]],
ppl_scaling = params[[1]],
mean_age = params[[2]],
sd_age = params[[3]],
travel_cost = params[[4]],
value = as.numeric(params[[5]]),
mobility = as.numeric(params[[6]]),
k = params[[7]],
r = params[[8]],
maturity = params[[9]],
max_age = params[[10]],
years = 10,
management_cost = 500)
# results
p_s <- sum(simulated[[2]][[1]][,4]) # trees/year1/protected column == 1
np_s <- length(simulated[[2]][[1]][,4]) - sum(simulated[[2]][[1]][,4])
# protected at start
if (length(simulated[[2]]) != (years + 1)) {
p_e <- 0;
np_e <- 0;
} else {
p_e <- sum(simulated[[2]][[years +1]][,4])
np_e <- length(simulated[[2]][[years +1]][,4]) - sum(simulated[[2]][[years +1]][,4])
}
# total deforestation
t <- ((p_e + np_e) - (p_s + np_s))/ (p_s + np_s)
difference <- abs(diff(c(t,actual)))
cat(difference)
}
instance <- "/home/chris/Downloads/555723848_1.rds"
params <- c(0.122, 68, 10, 1574, 1033, 8, 0.638, 0.193, 13, 104)
test <- irace_deforecast(instance = instance, params = params)
test <- irace_deforecast(instance = instance, params = params)
getwd()
cat(t)
library(roxygen2)
roxygenise()
library(deforecasteR)
devtools::build()
library(deforecasteR)
install.packages("irace")
system.file(package = "irace")
# script for calling irace
library(irace)
setwd("/home/cl59/Documents/irace")
setwd("/home/chris/Documents/irace")
i <- 1;
while (i <= 12) {
assign(x = paste0("scenario", i),
value = readScenario(paste0("s",i)))
i <- i + 1
}
parameters <- readParameters("./parameters.txt")
irace(scenario1,parameters)
irace(scenario1,parameters)
View(scenario1)
i <- 1;
while (i <= 12) {
assign(x = paste0("scenario", i),
value = readScenario(paste0("s",i)))
i <- i + 1
}
parameters <- readParameters("./parameters.txt")
irace(scenario1,parameters)
#! /usr/bin/env Rscript
library(deforecasteR)
library(devtools)
install_github("chrislittleboy/deforecasteR", force = T)
install_github("chrislittleboy/deforecasteR", force = T)
install_github("chrislittleboy/deforecasteR", force = T)
library(deforecasteR)
setwd("home/chris/Documents/irace"
)
getwe()
getwd()
setwd("/home/chris/Documents/irace"
)
install_github("chrislittleboy/deforecasteR", force = T)
library(devtools)
install_github("chrislittleboy/deforecasteR", force = T)
library(deforecasteR)
uninstall("deforecasteR")
