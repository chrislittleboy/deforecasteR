ydim = ydim,
ppl_n = ppl_n); # makes the people
} else {
people <- get_people(
ppl_loc = ppl_loc, # or gets the people
ppl_scaling = ppl_scaling)
}
if(explicit == FALSE){
trees <- make_trees(
xdim = xdim,
ydim = ydim,
p_n = p_n,
np_n = np_n,
mean_age = mean_age,
sd_age = sd_age); # makes the trees
} else {
trees <- get_trees(
p_loc = p_loc,
np_loc = np_loc,
mean_age = mean_age,
sd_age = sd_age # or gets the trees
)
}
ppl_results <- vector(mode = "list", length = years + 1);
tree_results <- vector(mode = "list", length = years + 1);
ppl_results[[1]] <- people;
tree_results[[1]] <- trees;
t <- 1;
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
pkgbuild::clean_dll()
roxygen2::roxygenise()
load_all()
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
library(deforecasteR`)
library(deforecasteR)
adf
library(deforecasteR)
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
pkgbuild::clean_dll()
unload()
roxygenise()
load_all()
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
load_all()
felled <- deforecasteR::felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
felled <- deforecast::felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
?felling
felling
?chop
??chop
sourceCpp("src/chop.cpp")
felled <- deforecast::felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
chop
Rcpp::compileAttributes()
compileAttributes()
compileAttributes()
compileAttributes()
1+1
library(Rcpp)
Rcpp::compileAttributes()
Rcpp::initialize()
load_all()
clean_dll()
clean_vignettes()
load_all()
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
compileAttributes()
clean_dll()
load_all()
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
clean_dll()
load_all()
load_all()
load_all()
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
load_all()
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
clean_dll()
load_all()
load_all()
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
load_all()
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
clean_dll()
load_all()
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
devtools::load_all(".")
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
roxygenise()
roxygenise()
roxygenise(clean_dll())
clean_dll()
roxygenise()
pkgbuild::clean_dll()
roxygenise()
pkgbuild::compile_dll()
devtools::document()
roxygenise()
roxygenise()
roxygenise(clean = TRUE)
?getLoadedDLLs
getLoadedDLLs()
roxygenise(clean = TRUE)
?getDLLRegisteredRoutines.DLLInfo
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
load_all()
pkgbuild::clean_dll()
load_all()
load_all()
library(deforecasteR)
sum(ageapt(rnrom(10000, 50,30), 10.5,70))
library(deforecasteR)
sum(ageapt(rnrom(10000, 50,30), 10.5,70))
library(deforecasteR)
library(deforecasteR)
library(deforecasteR)
library(roxygen2)
roxygenise()
load_all()
library(devtools)
load_all()
roxygenise()
load_all()
library(devtools)
library(devtools)
trees <- make_trees()
load_all()
make_trees(300,300, 400,400, 50,20)
trees <- make_trees(300,300, 400,400, 50,20)
age <- trees[,3]
age <- trees[,3]
r_ageapt <- function(age,min,max) {
age[age < min] <- 0;
age[age > max] <- 0;
age[age != 0] <- 1;
}
microbenchmark(r_ageapt(trees[,3], 20,70))
library(microbenchmark)
microbenchmark(r_ageapt(trees[,3], 20,70))
load_all()
microbenchmark(ageapt(age, 20,70)
microbenchmark(ageapt(age, 20,70))
microbenchmark(ageapt(age, 20,70))
cpp <- ageapt(age, 20,70)
r <- r_ageapt(age,20,70)
r_ageapt <- function(age,min,max) {
age[age < min] <- 0;
age[age > max] <- 0;
age[age != 0] <- 1;
}
r <- r_ageapt(age,20,70)
age <- trees[,3]
age[age < min] <- 0;
age <- trees[,3]
age[age < min] <- 0;
age < min <- 0;
age < min = 0;
min = 10
age[age < min] = 0;
max = 100
age > max = 0;
age != 0 = 1;
age[age != 0] <- 1;
r_ageapt <- function(age,min,max) {
age[age < min] = 0;
age[age > max] = 0;
age[age != 0] <- 1;
}
microbenchmark(r_ageapt(rnorm(1000, 50,25), 10, 100))
microbenchmark(ageapt(rnorm(1000, 50,25), 10, 100))
microbenchmark(ageapt(rnorm(10000, 50,25), 10, 100))
microbenchmark(r_ageapt(rnorm(10000, 50,25), 10, 100))
microbenchmark(r_ageapt(rnorm(100000, 50,25), 10, 100))
microbenchmark(ageapt(rnorm(100000, 50,25), 10, 100))
load_all()
test <- deforecast()
growth
load_all()
test <- deforecast()
microbenchmark(deforecast)
microbenchmark(deforecast(ppl_n = 10000, np_n = 20000, p_n = 10000))
View(trees)
library(devtools)
load_all()
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
library(roxygen2)
roxygenise()
roxygenise()
load_all()
library(devtools)
load_all()
microbenchmark::microbenchmark(deforecast())
library(microbenchmark)
microbenchmark(deforecast)
microbenchmark(deforecast, ppl_n = 10000)
install.packages("usethis")
install.packages("usethis")
library(usethis)
use_vignette()
?use_vignette
use_vignette(deforecasteR)
use_vignette("deforecasteR")
library(deforecasteR)
library(deforecasteR)
library(deforecasteR)
getwd()
library(devtools)
load_all()
check()
?check
check(check_dir = T)
check()
check()
getSrcDirectory()
getSrcDirectory(deforecasteR)
library(deforecasteR)
usethis::use_description()
usethis::use_description()
check()
check()
check()
load_all()
library(devtools)
library(pkgbuild)
pkgbuild::build()
document()
build_win()
library(deforecasteR)
?check()
check_built()
check_built("deforecasteR")
check_built("deforecast")
library(deforecasteR)
use_testthat()
?test_that
load_all()
trees <- c(rnorm(100,50,25),rnorm(100,50,25),rnorm(100,50,25), sample(c(1,0), size = 100, replace = T, prob = NULL))
trees <- cbind(rnorm(100,50,25),rnorm(100,50,25),rnorm(100,50,25), sample(c(1,0), size = 100, replace = T, prob = NULL))
View(trees)
trees <- cbind(round(rnorm(100,50,25), digits =0),round(rnorm(100,50,25), digits =0),round(rnorm(100,50,25), digits =0),rnorm(100,50,25), sample(c(1,0), size = 100, replace = T, prob = NULL))
View(trees)
trees <- cbind(round(rnorm(100,50,25), digits =0),round(rnorm(100,50,25), digits =0),round(rnorm(100,50,25), digits =0), sample(c(1,0), size = 100, replace = T, prob = NULL))
View(trees)
trees[trees <=0] <- 1
View(trees)
r_l <- runif(1)
r_l <- runif(0.5)
r_l <- runif(1)
growth(trees = trees)
r_l <- runif(1)
r_l <- runif(1)
growth
round(runif(1) *100, digits = 0)
a <- round(runif(1) *100, digits = 0)
a <- round(runif(1) *100, digits = 0)
if (a <= 50) {min <- a; max <- 100-a} else {max <- a, min = 100-a}
if (a <= 50) {min <- a; max <- 100-a} else {max <- a; min = 100-a}
growth(trees = trees, r_l = r_l,min = min, max = max)
deforecast
?runif
runif(0,100)
runif(ppl_n,0,100)
ppl_n = 500
runif(ppl_n,0,100)
sample(xdim,ppl_n)
xdim = c(50:2000)
sample(xdim,ppl_n)
ppl_scaling = c(1:100)/100;
ppl_scaling = c(1:1000)/1000;
xdim = c(50:2000)
ydim = xdim;
explicit = c(TRUE,FALSE)
ppl_n = c(50:2000);
ppl_loc = list(cbind(sample(xdim,ppl_n),sample(ydim,ppl_n)), NULL)
xdim = c(50:2000)
?sample
xdim = sample(c(50:2000), 1)
ydim = sample(c(50:2000))
explicit = sample(c(TRUE,FALSE), 1)
ppl_loc = sample(list(cbind(sample(xdim,ppl_n),sample(ydim,ppl_n)), NULL), 1)
ppl_loc = sample(list(cbind(sample(xdim,ppl_n),sample(ydim,ppl_n)), NULL), 1)[1]
ppl_loc = sample(list(cbind(sample(xdim,ppl_n),sample(ydim,ppl_n)), NULL), 1)[[1]]
params <- c(xdim, ydim, explicit, ppl_n, ppl_loc,ppl_scaling, budget, p_n, np_n,
p_loc, np_loc, mean_age, sd_age, travel_cost, management_cost, value,
mobility, k, ppl_scaling, maturity, max_age, years)
rm(list = ls())
xdim = sample(c(50:2000), 1)
ydim = sample(c(50:2000))
explicit = sample(c(TRUE,FALSE), 1)
ppl_n = sample(c(50:2000), 1)
ppl_loc = sample(list(cbind(sample(xdim,ppl_n),sample(ydim,ppl_n)), NULL), 1)[[1]]
ppl_loc = sample(list(cbind(sample(xdim,ppl_n),sample(ydim,ppl_n)), NULL), 1)[[1]]
ppl_loc = sample(list(cbind(sample(xdim,ppl_n),sample(ydim,ppl_n)), NULL), 1)[[1]]
ppl_loc = sample(list(cbind(sample(xdim,ppl_n, replace = T),sample(ydim,ppl_n, replace = T)), NULL), 1)[[1]]
xdim = sample(c(50:2000), 1)
ydim = sample(c(50:2000))
explicit = sample(c(TRUE,FALSE), 1)
ppl_n = sample(c(50:2000), 1)
ppl_loc = sample(list(cbind(sample(xdim,ppl_n, replace = T),sample(ydim,ppl_n, replace = T)), NULL), 1)[[1]]
ppl_scaling = sample(c(1:1000)/1000, 1)
budget = sample(c(200:5000), 1)
p_n = sample(c(1:1000), 1)
np_n = sample(c(1:1000), 1)
p_loc = sample(list(cbind(sample(xdim,p_n, replace = T),sample(ydim,p_n, replace = T)), NULL), 1)[[]]
np_loc = sample(list(cbind(sample(xdim,np_n, replace = T),sample(ydim,np_n, replace = T)), NULL),1)[[]]
mean_age = sample(c(10:150), 1)
sd_age = sample(c(1:50), 1)
travel_cost = sample(c(0:100), 1)
management_cost = sample(c(0:1000), 1)
value = sample(c(100:10000), 1)
mobility = sample(c(1:1000)/1)
k = sample(c(50:100)/100, 1)
ppl_scaling = sample(c(1:500)/1000, 1)
maturity = sample(c(0:round(mean_age/1.5, digits = 0)), 1)
max_age = sample(c(round(mean_age * 1.5, digits = 0):mean_age + sd_age * 3),1)
years = sample(c(0:10), 1)
params <- c(xdim, ydim, explicit, ppl_n, ppl_loc,ppl_scaling, budget, p_n, np_n,
p_loc, np_loc, mean_age, sd_age, travel_cost, management_cost, value,
mobility, k, ppl_scaling, maturity, max_age, years)
params <- list(c(xdim, ydim, explicit, ppl_n, ppl_loc,ppl_scaling, budget, p_n, np_n,
p_loc, np_loc, mean_age, sd_age, travel_cost, management_cost, value,
mobility, k, ppl_scaling, maturity, max_age, years))
View(params)
params <- list(xdim, ydim, explicit, ppl_n, ppl_loc,ppl_scaling, budget, p_n, np_n,
p_loc, np_loc, mean_age, sd_age, travel_cost, management_cost, value,
mobility, k, ppl_scaling, maturity, max_age, years)
View(params)
rm(list = ls())
x <- 1
set.seed(x)
xdim = sample(c(50:2000), 1)
ydim = sample(c(50:2000))
explicit = sample(c(TRUE,FALSE), 1)
ppl_n = sample(c(50:2000), 1)
ppl_loc = sample(list(cbind(sample(xdim,ppl_n, replace = T),sample(ydim,ppl_n, replace = T)), NULL), 1)[[1]]
ppl_scaling = sample(c(1:1000)/1000, 1)
budget = sample(c(200:5000), 1)
p_n = sample(c(1:1000), 1)
np_n = sample(c(1:1000), 1)
p_loc = sample(list(cbind(sample(xdim,p_n, replace = T),sample(ydim,p_n, replace = T)), NULL), 1)[[]]
np_loc = sample(list(cbind(sample(xdim,np_n, replace = T),sample(ydim,np_n, replace = T)), NULL),1)[[]]
mean_age = sample(c(10:150), 1)
sd_age = sample(c(1:50), 1)
travel_cost = sample(c(0:100), 1)
management_cost = sample(c(0:1000), 1)
value = sample(c(100:10000), 1)
mobility = sample(c(1:1000)/1)
k = sample(c(50:100)/100, 1)
ppl_scaling = sample(c(1:500)/1000, 1)
maturity = sample(c(0:round(mean_age/1.5, digits = 0)), 1)
max_age = sample(c(round(mean_age * 1.5, digits = 0):mean_age + sd_age * 3),1)
years = sample(c(0:10), 1)
if(explicit == FALSE) {
people <- make_people(
xdim = xdim,
ydim = ydim,
ppl_n = ppl_n); # makes the people
} else {
people <- get_people(
ppl_loc = ppl_loc, # or gets the people
ppl_scaling = ppl_scaling)
}
library(devtools)
install_github("chirslittleboy/deforecasteR")
install_github("chirslittleboy/deforecasteR")
install_github("chirslittleboy/deforecasteR")
install_github("chirslittleboy/deforecasteR")
install_github("chrislittleboy/deforecasteR")
library(deforecasteR)
deforecast
deforecast()
deforecasteR::deforecast()
deforecasteR
install_github("chrislittleboy/deforecasteR")
library(deforecasteR)
loadNamespace(deforecasteR)
loadNamespace(deforecast)
library(deforecasteR)
?install_github
install_github("chrislittleboy/deforecasteR")
install_github("chrislittleboy/deforecasteR", force = T)
library(devtools)
install.github("chrislittleboy/deforecasteR")
install_github("chrislittleboy/deforecasteR")
install_github("chrislittleboy/deforecasteR", force = T)
library(deforecasteR)
