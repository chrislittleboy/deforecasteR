management_cost = 500)
years = 10
# results
p_s <- sum(simulated[[2]][[1]][,4]) # trees/year1/protected column == 1
np_s <- length(simulated[[2]][[1]][,4]) - sum(simulated[[2]][[1]][,4])
# protected at start
if (length(simulated[[2]]) != (years + 1)) {
p_e <- 0;
np_e <- 0;
} else {
p_e <- sum(simulated[[2]][[years +1]][,4])
np_e <- length(simulated[[2]][[years +1]][,4]) - sum(simulated[[2]][[years +1]][,4])
}
# total deforestation
t <- ((p_e + np_e) - (p_s + np_s))/ (p_s + np_s)
difference <- abs(diff(c(t,actual)))
return(difference)
}
cat(irace_deforecast(instance, params))
install_github("chrislittleboy/deforecasteR")
install_github("chrislittleboy/deforecasteR", force = T)
cat(irace_deforecast(instance, params))
irace_deforecast <- function(instance,params) {
actual <- read.csv("/home/chris/Documents/irace/actual.csv")[,2:3]
actual <- actual$fg[actual$id ==  basename(instance)];
start <- readRDS(file = instance);
simulated <- deforecast(xdim = NULL,
ydim = NULL,
explicit = TRUE,
p_n = NULL,
np_n = NULL,
ppl_n = NULL,
ppl_loc = start[[3]],
p_loc = start[[1]],
np_loc = start[[2]],
ppl_scaling = as.numeric(params[[1]]),
mean_age = as.numeric(params[[2]]),
sd_age = as.numeric(params[[3]]),
travel_cost = as.numeric(params[[4]]),
value = as.numeric(params[[5]]),
mobility = as.numeric(params[[6]]),
k = as.numeric(params[[7]]),
r = as.numeric(params[[8]]),
maturity = as.numeric(params[[9]]),
max_age = as.numeric(params[[10]]),
years = 10,
management_cost = 500)
years = 10
# results
p_s <- sum(simulated[[2]][[1]][,4]) # trees/year1/protected column == 1
np_s <- length(simulated[[2]][[1]][,4]) - sum(simulated[[2]][[1]][,4])
# protected at start
if (length(simulated[[2]]) != (years + 1)) {
p_e <- 0;
np_e <- 0;
} else {
p_e <- sum(simulated[[2]][[years +1]][,4])
np_e <- length(simulated[[2]][[years +1]][,4]) - sum(simulated[[2]][[years +1]][,4])
}
# total deforestation
t <- ((p_e + np_e) - (p_s + np_s))/ (p_s + np_s)
difference <- abs(diff(c(t,actual)))
return(difference)
}
cat(irace_deforecast(instance, params))
cat(irace_deforecast(instance, params))
cat(irace_deforecast(instance, params))
cat(irace_deforecast(instance, params))
cat(irace_deforecast(instance, params))
install_github("chrislittleboy/deforecasteR", force = T)
install_github("chrislittleboy/deforecasteR", force = T)
simulated <- deforecast(xdim = NULL,
ydim = NULL,
explicit = TRUE,
p_n = NULL,
np_n = NULL,
ppl_n = NULL,
ppl_loc = start[[3]],
p_loc = start[[1]],
np_loc = start[[2]],
ppl_scaling = as.numeric(params[[1]]),
mean_age = as.numeric(params[[2]]),
sd_age = as.numeric(params[[3]]),
travel_cost = as.numeric(params[[4]]),
value = as.numeric(params[[5]]),
mobility = as.numeric(params[[6]]),
k = as.numeric(params[[7]]),
r = as.numeric(params[[8]]),
maturity = as.numeric(params[[9]]),
max_age = as.numeric(params[[10]]),
years = 10,
management_cost = 500)
years = 10
cat(irace_deforecast(instance, params))
cat(irace_deforecast(instance, params))
cat(irace_deforecast(instance, params))
cat(irace_deforecast(instance, params))
cat(irace_deforecast(instance, params))
simulated <- deforecast(xdim = NULL,
ydim = NULL,
explicit = TRUE,
p_n = NULL,
np_n = NULL,
ppl_n = NULL,
ppl_loc = start[[3]],
p_loc = start[[1]],
np_loc = start[[2]],
ppl_scaling = as.numeric(params[[1]]),
mean_age = as.numeric(params[[2]]),
sd_age = as.numeric(params[[3]]),
travel_cost = as.numeric(params[[4]]),
value = as.numeric(params[[5]]),
mobility = as.numeric(params[[6]]),
k = as.numeric(params[[7]]),
r = as.numeric(params[[8]]),
maturity = as.numeric(params[[9]]),
max_age = as.numeric(params[[10]]),
years = 10,
management_cost = 500)
#debug
params <- c(0.52, 68, 16, 1719, 599, 90, 0.585, 0.186, 12, 91)
instance <- "/home/chris/Documents/irace/train/c1/555646257_1.rds"
irace_deforecast <- function(instance,params) {
actual <- read.csv("/home/chris/Documents/irace/actual.csv")[,2:3]
actual <- actual$fg[actual$id ==  basename(instance)];
start <- readRDS(file = instance);
simulated <- deforecast(xdim = NULL,
ydim = NULL,
explicit = TRUE,
p_n = NULL,
np_n = NULL,
ppl_n = NULL,
ppl_loc = start[[3]],
p_loc = start[[1]],
np_loc = start[[2]],
ppl_scaling = as.numeric(params[[1]]),
mean_age = as.numeric(params[[2]]),
sd_age = as.numeric(params[[3]]),
travel_cost = as.numeric(params[[4]]),
value = as.numeric(params[[5]]),
mobility = as.numeric(params[[6]]),
k = as.numeric(params[[7]]),
r = as.numeric(params[[8]]),
maturity = as.numeric(params[[9]]),
max_age = as.numeric(params[[10]]),
years = 10,
management_cost = 500)
years = 10
# results
p_s <- sum(simulated[[2]][[1]][,4]) # trees/year1/protected column == 1
np_s <- length(simulated[[2]][[1]][,4]) - sum(simulated[[2]][[1]][,4])
# protected at start
if (length(simulated[[2]]) != (years + 1)) {
p_e <- 0;
np_e <- 0;
} else {
p_e <- sum(simulated[[2]][[years +1]][,4])
np_e <- length(simulated[[2]][[years +1]][,4]) - sum(simulated[[2]][[years +1]][,4])
}
# total deforestation
t <- ((p_e + np_e) - (p_s + np_s))/ (p_s + np_s)
difference <- abs(diff(c(t,actual)))
return(difference)
}
cat(irace_deforecast(instance, params))
get_trees()
get_trees
install_github("chrislittleboy/deforecasteR", force = T)
library(deforecasteR)
get_trees
getwd()
deforecaster::get_tree
deforecasteR::get_tree
deforecasteR::gettree
load_all()
library(devtools())
library(devtools
)
load_all()
get_trees
#debug
params <- c(0.52, 68, 16, 1719, 599, 90, 0.585, 0.186, 12, 91)
instance <- "/home/chris/Documents/irace/train/c1/555646257_1.rds"
get_trees
irace_deforecast <- function(instance,params) {
actual <- read.csv("/home/chris/Documents/irace/actual.csv")[,2:3]
actual <- actual$fg[actual$id ==  basename(instance)];
start <- readRDS(file = instance);
simulated <- deforecast(xdim = NULL,
ydim = NULL,
explicit = TRUE,
p_n = NULL,
np_n = NULL,
ppl_n = NULL,
ppl_loc = start[[3]],
p_loc = start[[1]],
np_loc = start[[2]],
ppl_scaling = as.numeric(params[[1]]),
mean_age = as.numeric(params[[2]]),
sd_age = as.numeric(params[[3]]),
travel_cost = as.numeric(params[[4]]),
value = as.numeric(params[[5]]),
mobility = as.numeric(params[[6]]),
k = as.numeric(params[[7]]),
r = as.numeric(params[[8]]),
maturity = as.numeric(params[[9]]),
max_age = as.numeric(params[[10]]),
years = 10,
management_cost = 500)
years = 10
# results
p_s <- sum(simulated[[2]][[1]][,4]) # trees/year1/protected column == 1
np_s <- length(simulated[[2]][[1]][,4]) - sum(simulated[[2]][[1]][,4])
# protected at start
if (length(simulated[[2]]) != (years + 1)) {
p_e <- 0;
np_e <- 0;
} else {
p_e <- sum(simulated[[2]][[years +1]][,4])
np_e <- length(simulated[[2]][[years +1]][,4]) - sum(simulated[[2]][[years +1]][,4])
}
# total deforestation
t <- ((p_e + np_e) - (p_s + np_s))/ (p_s + np_s)
difference <- abs(diff(c(t,actual)))
return(difference)
}
cat(irace_deforecast(instance, params))
#debug
params <- c(0.52, 68, 16, 1719, 599, 90, 0.585, 0.186, 12, 91)
instance <- "/home/chris/Documents/irace/train/c1/555646257_1.rds"
xdim = NULL;
ydim = NULL;
explicit = TRUE;
p_n = NULL;
np_n = NULL;
ppl_n = NULL;
ppl_loc = start[[3]];
instance <- "/home/chris/Documents/irace/train/c1/555646257_1.rds"
start <- readRDS(file = instance);
ppl_loc = start[[3]];
p_loc = start[[1]];
np_loc = start[[2]];
ppl_scaling = as.numeric(params[[1]]);
mean_age = as.numeric(params[[2]]);
sd_age = as.numeric(params[[3]]);
travel_cost = as.numeric(params[[4]]);
value = as.numeric(params[[5]]);
mobility = as.numeric(params[[6]]);
k = as.numeric(params[[7]]);
r = as.numeric(params[[8]]);
maturity = as.numeric(params[[9]]);
max_age = as.numeric(params[[10]]);
years = 10;
management_cost = 500
if(explicit == FALSE) {
people <- make_people(
xdim = xdim,
ydim = ydim,
ppl_n = ppl_n); # makes the people
} else {
people <- get_people(
ppl_loc = ppl_loc, # or gets the people
ppl_scaling = ppl_scaling)
}
if(explicit == FALSE){
trees <- make_trees(
xdim = xdim,
ydim = ydim,
p_n = p_n,
np_n = np_n,
mean_age = mean_age,
sd_age = sd_age); # makes the trees
} else {
trees <- get_trees(
p_loc = p_loc,
np_loc = np_loc,
mean_age = mean_age,
sd_age = sd_age # or gets the trees
)
}
View(trees)
ppl_results <- vector(mode = "list", length = years + 1);
tree_results <- vector(mode = "list", length = years + 1);
ppl_results[[1]] <- people;
tree_results[[1]] <- trees;
t <- 1;
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
trees <-  cbind(
1:length(trees[,1]), # new ids for trees
matrix(trees[,1:4], ncol = 4)); # 1 (protected), 0 (not protected)
if(explicit == FALSE){
trees <- make_trees(
xdim = xdim,
ydim = ydim,
p_n = p_n,
np_n = np_n,
mean_age = mean_age,
sd_age = sd_age); # makes the trees
} else {
trees <- get_trees(
p_loc = p_loc,
np_loc = np_loc,
mean_age = mean_age,
sd_age = sd_age # or gets the trees
)
}
trees <-  cbind(
1:length(trees[,1]), # new ids for trees
matrix(trees[,1:4], ncol = 4)); # 1 (protected), 0 (not protected)
View(trees)
if(explicit == FALSE){
trees <- make_trees(
xdim = xdim,
ydim = ydim,
p_n = p_n,
np_n = np_n,
mean_age = mean_age,
sd_age = sd_age); # makes the trees
} else {
trees <- get_trees(
p_loc = p_loc,
np_loc = np_loc,
mean_age = mean_age,
sd_age = sd_age # or gets the trees
)
}
1:nrow(trees)
nrow(trees)
length(trees[,1])
trees <-  cbind(
1:length(trees[,1]), # new ids for trees
trees); # 1 (protected), 0 (not protected)
logged <- chop(x1 = people[,1],
x2 = trees[,2],
y1 = people[,2],
y2 = trees[,3],
p = trees[,5],
value = value,
m_cost = management_cost,
t_cost = travel_cost,
mobility = mobility)
# new people
newpeople <- matrix(cbind(logged[,3:4]), ncol = 2)
# gets ids of felled trees
felled <- logged[logged[,2] > 0,1]
'%!in%' <- function(x,y)!('%in%'(x,y))
trees <- trees[trees[,1] %!in% felled,2:5]
felling <- function(people, trees, value, management_cost, travel_cost, mobility){
trees <-  cbind(
1:nrow(trees), # new ids for trees
trees); # 1 (protected), 0 (not protected)
# does the logging and moving (see c++ function in src)
logged <- chop(x1 = people[,1],
x2 = trees[,2],
y1 = people[,2],
y2 = trees[,3],
p = trees[,5],
value = value,
m_cost = management_cost,
t_cost = travel_cost,
mobility = mobility)
# new people
newpeople <- matrix(cbind(logged[,3:4]), ncol = 2)
# gets ids of felled trees
felled <- logged[logged[,2] > 0,1]
# removes felled trees from trees and remove ids column
'%!in%' <- function(x,y)!('%in%'(x,y))
trees <- trees[trees[,1] %!in% felled,2:5]
# creates list of 2 - listed trees, and people
afterfelling <- list(trees,newpeople);
return(afterfelling);
}
if(explicit == FALSE){
trees <- make_trees(
xdim = xdim,
ydim = ydim,
p_n = p_n,
np_n = np_n,
mean_age = mean_age,
sd_age = sd_age); # makes the trees
} else {
trees <- get_trees(
p_loc = p_loc,
np_loc = np_loc,
mean_age = mean_age,
sd_age = sd_age # or gets the trees
)
}
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
people <- felled[[2]];
ppl_results[[t+1]] <- people; # stores results
trees <- felled[[1]];
if(length(matrix(trees, ncol = 4)[,1]) == 0){
tree_results[[t+1]] <- NULL
break;
} else {
r_l <- rate(trees, r,k) # calculates logistic growth rate based on carrying capacity
if (r_l > 0) {
trees <- growth(trees = trees, r_l = r_l, min = maturity, max = max_age); # grows the forest
}
tree_results[[t+1]] <- trees;
}
t <- t + 1; # onto the next year!
while(t <= years){
felled <- felling(
people = people,
trees = trees,
value = value,
management_cost = management_cost,
travel_cost = travel_cost,
mobility = mobility); # removing trees from the landscape and adding value to people
people <- felled[[2]];
ppl_results[[t+1]] <- people; # stores results
trees <- felled[[1]];
if(length(matrix(trees, ncol = 4)[,1]) == 0){
tree_results[[t+1]] <- NULL
break;
} else {
r_l <- rate(trees, r,k) # calculates logistic growth rate based on carrying capacity
if (r_l > 0) {
trees <- growth(trees = trees, r_l = r_l, min = maturity, max = max_age); # grows the forest
}
tree_results[[t+1]] <- trees;
}
t <- t + 1; # onto the next year!
}
install_github("chrislittleboy/deforecasteR", force = T)
# script for calling irace
library(irace)
# script for calling irace
rm(list = ls())
library(irace)
setwd("/home/chris/Documents/irace")
i <- 1;
while (i <= 12) {
assign(x = paste0("scenario", i),
value = readScenario(paste0("s",i)))
i <- i + 1
}
parameters <- readParameters("./parameters.txt")
irace(scenario1,parameters)
irace_deforecast <- function(instance,params) {
actual <- read.csv("/home/chris/Documents/irace/actual.csv")[,2:3]
actual <- actual$fg[actual$id ==  basename(instance)];
start <- readRDS(file = instance);
simulated <- deforecast(xdim = NULL,
ydim = NULL,
explicit = TRUE,
p_n = NULL,
np_n = NULL,
ppl_n = NULL,
ppl_loc = start[[3]],
p_loc = start[[1]],
np_loc = start[[2]],
ppl_scaling = as.numeric(params[[1]]),
mean_age = as.numeric(params[[2]]),
sd_age = as.numeric(params[[3]]),
travel_cost = as.numeric(params[[4]]),
value = as.numeric(params[[5]]),
mobility = as.numeric(params[[6]]),
k = as.numeric(params[[7]]),
r = as.numeric(params[[8]]),
maturity = as.numeric(params[[9]]),
max_age = as.numeric(params[[10]]),
years = 10,
management_cost = 500)
years = 10
# results
p_s <- sum(simulated[[2]][[1]][,4]) # trees/year1/protected column == 1
np_s <- length(simulated[[2]][[1]][,4]) - sum(simulated[[2]][[1]][,4])
# protected at start
if (length(simulated[[2]]) != (years + 1)) {
p_e <- 0;
np_e <- 0;
} else {
p_e <- sum(simulated[[2]][[years +1]][,4])
np_e <- length(simulated[[2]][[years +1]][,4]) - sum(simulated[[2]][[years +1]][,4])
}
# total deforestation
t <- ((p_e + np_e) - (p_s + np_s))/ (p_s + np_s)
difference <- abs(diff(c(t,actual)))
return(difference)
}
#debug
params <- c(0.52, 68, 16, 1719, 599, 90, 0.585, 0.186, 12, 91)
instance <- "/home/chris/Documents/irace/train/c1/555646257_1.rds"
felling
library(deforecasteR)
felling
install_github("chrislittleboy/deforecasteR")
library(deforecasteR)
irace(scenario1,parameters)
felling
library(deforecasteR)
felling
deforecasteR::felling
load_all()
roxygenize()
library(roxygen2)
roxygenize()
